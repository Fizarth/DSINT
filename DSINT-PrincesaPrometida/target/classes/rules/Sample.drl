package com.sample
 
import com.sample.DroolsTest.Message;
import animales.*;
import lugares.*;
import personajes.*;
import relaciones.*;
import utilidades.*;
import java.util.*;
import profesiones.*;

//Creación de la base
rule "Creacion Profesiones"
	then 
		insert(new BrigadaBrutal());
		insert(new Curandero());
		insert(new Desempleado());
		insert(new Espadachin());
		insert(new Gobernante());
		insert(new Granjero());
		insert(new Guardia());
		insert(new Herrero());
		insert(new Indefinido());
		insert(new Mercenario());
		insert(new Pirateria());
		insert(new Sacerdote());
		insert(new Sirviente());
		insert(new Visir());
		System.out.println("Creo las profesiones");
end 

rule "Creacion Lugares"
	then
		insert(new AcantiladosLocura());
		insert(new Bosque());
		insert(new BosqueLadrones());
		insert(new CaminoMontana());
		insert(new CasaMilagrosoMax());
		insert(new Castillo());
		insert(new Espana());
		insert(new Granja());
		insert(new HabitacionN());
		insert(new Mar());
		insert(new PantanoFuego());
		insert(new PozoDesesperacion());	
		System.out.println("Creo los lugares");	
end 

rule "Creacion Animales"
	when 
		mar: Lugar(nombre == "Mar")
		granja: Lugar(nombre == "Granja")
		bl: Lugar(nombre=="Boque de los Ladrones")
		pantano: Lugar(nombre == "Pantano de Fuego")
	then
		insert(new AnguilaElectrica(mar));
		insert(new Caballo(granja));
		insert(new Cabra(granja));
		insert(new Cerdo(granja));
		insert(new Perro(bl));
		insert(new RoedorAspectoGigantesco(pantano));
		insert(new Vaca(granja));
		System.out.println("Se han añadido los animales");
end

rule "Creacion Personajes Acto 0"
	agenda-group "Acto0"
	when 
		granja: Granja()
		granjero: Granjero()
		hab: HabitacionN()
		pir: Pirateria()
		mar: Mar()
	then
		insert(new Westley(granjero, granja));
		insert(new Buttercup(granjero,granja));
		insert(new Abuelo(hab));
		insert(new Madre(hab));
		insert(new Nieto(hab));
		insert(new Pirata(pir,mar));
		System.out.println("Acto0: Se crean los personajes");
end

rule "Creacion de Personajes Acto1"
	agenda-group "Acto1"
	when 
		mercenario: Mercenario()
		Gobernante: Gobernante()
		v: Visir()
		castillo: Castillo()
		e : Espana()
		h: Herrero()
		bosque: Bosque()
	then
		insert(new Vizzini(mercenario, bosque));
		insert(new Inigo(mercenario, bosque));
		insert(new Fezzik(mercenario, bosque));
		insert(new Rey(Gobernante, castillo));
		insert(new Principe(Gobernante, castillo));
		insert(new Conde(v, castillo));
		insert(new PadreInigo(h, e));
		System.out.println("Acto1: Se crean los personajes");
end

//Consultas
rule "Consulta Quien" 
	when 
		con: ConsultaQuien()
		p: Personaje (nombre == con.getNombre)
	then
		System.out.println("ENTRO REGLA CONSULTA QUIEN");
		System.out.println(p.toString());
		Archivo.getUnicaInstancia().escribir(p.toString() + "\n");
end

rule "Consulta Quien No Existe"
	when 
		con: ConsultaQuien()
		not Personaje (nombre == con.getNombre)
	then
		System.out.println("No sé quien es " + con.getNombre() + " en el acto " + con.getActo());
		Archivo.getUnicaInstancia().escribir("No sé quien es " + con.getNombre() + " en el acto " + con.getActo()+ "\n");
end

rule "Consulta Que Incio"
	when
		con: ConsultaQue()
	then
		System.out.println("CONSULTA QUE");
		System.out.print("En el acto " + con.getActo().getNumActo() + "." + " ");
		Archivo.getUnicaInstancia().escribir("En el acto " + con.getActo().getNumActo() + "." + " ");
end

rule "Consulta Que"
	when
		con: ConsultaQue()
		per: Personaje()
	then
		ArrayList<Relacion> relaciones = (ArrayList)per.getRelacionesPersonaje();
		for(Relacion relacion : relaciones){
			System.out.print(per.getNombre() + " " + relacion + ", ");
			Archivo.getUnicaInstancia().escribir(per.getNombre() + " " + relacion + ", ");
		}
		Archivo.getUnicaInstancia().escribir("\n");
		System.out.println("");
end

//Inicio Acto0
rule "Nieto es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(ab);
    Relacion fm2 = new FamiliarDe(md);
    ArrayList<Relacion> listant = nt.getRelacionesPersonaje();
    listant.add(fm1);
    listant.add(fm2);
    modify(nt){
      setRelacionesPersonaje(listant);
    }
   System.out.println("El nieto es familiar del abuelo y la madre" );
end

rule "Abuelo es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(nt);
    Relacion fm2 = new FamiliarDe(md);
    ArrayList<Relacion> listaab = ab.getRelacionesPersonaje();
    listaab.add(fm1);
    listaab.add(fm2);

    modify(ab){
      setRelacionesPersonaje(listaab);
    }
    System.out.println("Abuelo familia" );
end

rule "Madre es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(ab);
    Relacion fm2 = new FamiliarDe(nt);
    ArrayList<Relacion> listamd = md.getRelacionesPersonaje();
    listamd.add(fm1);
    listamd.add(fm2);
    modify(md){
          setRelacionesPersonaje(listamd);
    }
    System.out.println("Madre es familiar del abuelo y nieto" );
end

rule "Nieto está enfermo"
when
    nt: Nieto()
    ab: Abuelo()
    md: Madre()
  then
  	modify(md){
  		setUbicacionActual(null);
  	}
  	System.out.println("Madre se despide y abuelo lee un cuento al nieto" );
end

rule "Westley quiere a Buttercup"
  when
    wt: Personaje(nombre == "Westley")
    bt: Personaje(nombre == "Buttercup")
  then
    Relacion q1 = new QuiereA(bt);
    ArrayList<Relacion> listaR = wt.getRelacionesPersonaje();
    listaR.add(q1);
    modify(wt){
          setRelacionesPersonaje(listaR);
    }
end

rule "Buttercup quiere a Westley"
  when
    wt: Personaje(nombre == "Westley")
    bt: Personaje(nombre == "Buttercup")
  then
    Relacion q1 = new QuiereA(wt);
    ArrayList<Relacion> listaR = bt.getRelacionesPersonaje();
    listaR.add(q1);
    modify(bt){
          setRelacionesPersonaje(listaR);
    }
end

rule "Relacion Conocer"
    when
        p1 : Personaje(ubicacionActual != null)
        p2 : Personaje(nombre != p1.getNombre(), ubicacionActual == p1.getUbicacionActual() )
    then

        Relacion r = new ConoceA(p2);
        Relacion r2 = new ConocidoDe(p1);
        ArrayList<Relacion> listaR1 = p1.getRelacionesPersonaje();
        listaR1.add(r);
        modify(p1){
        	setRelacionesPersonaje(listaR1);
        }
        
        ArrayList<Relacion> listaR2 = p2.getRelacionesPersonaje();
        listaR2.add(r2);
        modify(p2){
        	setRelacionesPersonaje(listaR2);
        }
end

rule "Westley se va a hacer fortuna"
    when
    	l: Lugar(nombre == "Mar")
   		lg: Lugar(nombre == "Granja");
        p1: Westley(nombre == "Westley", ubicacionActual== lg,motivacion == Motivacion.GANAR_DINERO)
   		
    then
    	modify(p1){
    		setUbicacionActual(l);
    	}
     System.out.println(p1.getNombre() + " se va a " + l.getNombre() + " para " + p1.getMotivacion());
end

rule "Westley muere"
    when
    	lm: Lugar(nombre == "Mar")
        p: Personaje(nombre == "Westley",ubicacionActual == lm)
   		p2: Personaje(nombre == "Robert el Pirata")
    then
    	modify(p){
    		setEstadoSalud(EstadoSalud.MUERTO);
    	}
     System.out.println(p.getNombre() + " esta " + p.getEstadoSalud() +" asesinado por " + p2.getNombre());
end

rule "Buttercup odia al pirata"
    when
    	exists (Westley (estadoSalud == EstadoSalud.MUERTO))
    	bt: Personaje(nombre == "Buttercup")
    	pr: Personaje(nombre == "Robert el Pirata")
    then
    	Relacion od1 = new OdiaA(pr);
    	Relacion od2 = new OdiadoPor(bt);
    	
    	ArrayList<Relacion> listaR1 = bt.getRelacionesPersonaje();
   		listaR1.add(od1);
	    modify(bt){
	          setRelacionesPersonaje(listaR1);
	    }
	 
    	ArrayList<Relacion> listaR2 = pr.getRelacionesPersonaje();
   		listaR2.add(od2);
	    modify(pr){
	          setRelacionesPersonaje(listaR2);
	    }
end
//Fin acto0
// Inicio Acto1
rule "Rey y Principe son familia"
  when
    pr: Personaje(nombre == "Principe Humperdink")
    ry: Personaje(nombre == "El Rey")
  then
    Relacion fm1 = new FamiliarDe(ry);
    Relacion fm2 = new FamiliarDe(pr);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(fm1);
    modify(pr){
      setRelacionesPersonaje(listaR);
    }
    ArrayList<Relacion> listaR2 = ry.getRelacionesPersonaje();
    listaR2.add(fm2);
    modify(pr){
      setRelacionesPersonaje(listaR2);
    }
end

rule "Principe quiere a Buttercup"
  when
    pr: Personaje(nombre == "Principe")
    bt: Personaje(nombre == "Buttercup")
    
  then
    Relacion q1 = new QuiereA(bt);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(q1);
    modify(pr){
          setRelacionesPersonaje(listaR);
    }
end

rule "Buttercup prometida del príncipe"
  when
    pr: Personaje(nombre == "Principe Humperdink")
    bt: Personaje(nombre == "Buttercup")
    c: Lugar(nombre == "Castillo");
  then
    Relacion p1 = new PrometidaDe(pr);
    Relacion p2 = new PrometidoDe(bt);
    ArrayList<Relacion> listaR1 = bt.getRelacionesPersonaje();
    listaR1.add(p1);
    modify(bt){
          setRelacionesPersonaje(listaR1);
    }
    ArrayList<Relacion> listaR2 = pr.getRelacionesPersonaje();
    listaR2.add(p2);
    modify(pr){
          setRelacionesPersonaje(listaR2);
    }
    //Como es prometida ahora vivirá en el castillo
    modify(bt){
          setUbicacionActual(c);
    }
    System.out.println("El Príncipe y Buttercup se prometen y se anuncia la boda");
end

rule "Principe y Conde amigos"
  when
    pr: Personaje(nombre == "Principe Humperdink")
    cd: Personaje(nombre == "Tyrone Rugen")
  then
    Relacion am1 = new AmigoDe(cd);
    Relacion am2 = new AmigoDe(pr);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(am1);
    modify(pr){
      setRelacionesPersonaje(listaR);
    }
    ArrayList<Relacion> listaR2 = cd.getRelacionesPersonaje();
    listaR2.add(am2);
    modify(pr){
      setRelacionesPersonaje(listaR2);
    }
end
/*
rule "Anunciamiento boda"
	when 
		c: Lugar(nombre == "Castillo")
		//exists Buttercup(ubicacionActual == c)
		exists Buttercup( relacionesPersonaje )
	then
		System.out.println("Anunciamiento boda entre Buttercup y el principe");
		// ni idea pork ya esta lo de prometida pero como en los apuntes pone algo del anunciamiento de la boda
end 
*/
rule "Buttercup sale a pasear"
	when
		b: Lugar(nombre=="Bosque")
		c: Lugar(nombre =="Castillo")
		bt: Buttercup(ubicacionActual == c)
	then
		modify(bt){
			setUbicacionActual(b);
		}
		System.out.println("La Buttercup sale a pasear al bosque");
end			

rule "Secuestro Buttercup"
	when
		b: Bosque();
		princesa: Buttercup(ubicacionActual == b)
		mer: Mercenario()
		v: Vizzini(ubicacionActual == b, motivacion == Motivacion.DECLARAR_GUERRA)
		i: Inigo(ubicacionActual == b, trabajaDe == mer)
		f: Fezzik(ubicacionActual == b, profesion== mer)
		mar: Mar()
	then
		modify(princesa){
			setUbicacionActual(mar);
		}
		modify(i){
			setUbicacionActual(mar);
		}
		modify(f){
			setUbicacionActual(mar);
		}
		modify(v){
			setUbicacionActual(mar);
		}
		System.out.println(v.getNombre() + "," + i.getNombre() + " y " + f.getNombre() + " secuestran a "+ princesa.getNombre());
end

rule "Anguila ataca a buttercup"
	when 
		m: Mar();
		bt: Buttercup( ubicacionActual==m )
		a: AnguilaElectrica(ubicacionActual== m)
	then 
		modify(bt){
			setEstadoSalud(EstadoSalud.EN_PELIGRO);
		}
		System.out.println(a.getNombre() + " ataca a " + bt.getNombre() + " esta " + bt.getEstadoSalud());
end

rule "Fezzik salva a Buttercup"

	when 
		m: Mar()
		bt: Buttercup( estadoSalud == EstadoSalud.EN_PELIGRO, ubicacionActual == m )
		fz: Fezzik( ubicacionActual == m )
		a: AnguilaElectrica(ubicacionActual== m)
	then
		modify(bt){
			setEstadoSalud(EstadoSalud.VIVO);
		}
		modify(a){
			setEstadoSalud(EstadoSalud.MUERTO);
		}		
		System.out.println(fz.getNombre()+" salva a " + bt.getNombre());		
end

rule "Llegada a los acantilados"
	when
		m: Mar( )
		acantilados: AcantiladosLocura(  )
		an: Animal(ubicacionActual == m , estadoSalud == EstadoSalud.MUERTO)
		v: Vizzini (ubicacionActual == m)
		bt: Buttercup(ubicacionActual == m)
		f: Fezzik(ubicacionActual == m)
		i: Inigo(ubicacionActual == m)
		p: Pirata( ubicacionActual == m )
	then
		modify(i){
			setUbicacionActual(acantilados)
		}
		modify(f){
			setUbicacionActual(acantilados)
		}
		modify(bt){
			setUbicacionActual(acantilados)
		}
		modify(v){
			setUbicacionActual(acantilados)		
		}
		modify(p){
			setMotivacion(Motivacion.SECUESTRAR_PRINCESA)
		}
		System.out.println(v.getNombre() + "," + f.getNombre() + "," + i.getNombre() + "y" + bt.getNombre() + " llegan a " + acantilados.getNombre());
		System.out.println(p.getNombre() + " quiere " + p.getMotivacion());
end

rule "Pirata llega a los acantilados"
	when
		m:Mar()
		cm: CaminoMontana()
		ac: AcantiladosLocura()
		p: Pirata( ubicacionActual == m )
		i: Inigo( ubicacionActual == ac )
		v: Vizzini(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
		bt: Buttercup(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
		f: Fezzik(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
	then
		modify(p){
			setUbicacionActual(ac)
		}
		modify(bt){
			setUbicacionActual(cm)
		}
		modify(v){
			setUbicacionActual(cm)
		}
		modify(f){
			setUbicacionActual(cm)
		}
		System.out.println(v.getNombre() + "," + f.getNombre() + " y " + bt.getNombre() + " huyen a " + cm.getNombre());
		System.out.println( p.getNombre() + " llega a " + ac.getNombre());
end

rule "Historia Domingo Montoya"
	when
		ac: AcantiladosLocura()
		p: Pirata( ubicacionActual == ac )
		i: Inigo( ubicacionActual == ac )
		pi: PadreInigo()
	then
		Relacion fm1 = new FamiliarDe(pi);
	    Relacion fm2 = new FamiliarDe(i);
	    ArrayList<Relacion> listaR = i.getRelacionesPersonaje();
	    listaR.add(fm1);
	    
	    modify(i){
	      setRelacionesPersonaje(listaR);
	    }
	    ArrayList<Relacion> listaR2 = pi.getRelacionesPersonaje();
	    listaR2.add(fm2);
	    modify(pi){
	      setRelacionesPersonaje(listaR2);
	    }
	    
		modify(pi){
			setEstadoSalud(EstadoSalud.MUERTO);
		}
		modify(i){
			setMotivacion(Motivacion.VENGAR_PADRE);
		}
		System.out.println("Domingo Montoya está muerto y su hijo busca venganza");
end

rule "Pirata vence a Iñigo"
	when
		ac: AcantiladosLocura()
		cm: CaminoMontana()
		mercenario: Mercenario()
		p: Pirata(ubicacionActual == ac)
		i: Inigo(ubicacionActual == ac, trabajaDe == mercenario)
	then
		modify(i){
			setEstadoSalud(EstadoSalud.INCONSCIENTE)
		}
		modify(p){
			setUbicacionActual(cm)
		}
		System.out.println(p.getNombre() + " vence a " + i.getNombre() +" y sigue la persecución");
		
end 
//Introducir Iñigo desaparecido
rule "Pirata vence a Fezzik"
	when
		cm : CaminoMontana()
		p: Pirata(ubicacionActual == cm)
		f: Fezzik(ubicacionActual == cm)
	then
		modify(f){
			setEstadoSalud(EstadoSalud.INCONSCIENTE)
		}
		System.out.println(p.getNombre() + " vence a " + f.getNombre());
end
rule "Principe llega a los acantilados"
	when
		ac: AcantiladosLocura()
		cm: CaminoMontana()
		e: Espadachin()
		p: Pirata(ubicacionActual == cm)
		f: Fezzik(estadoSalud == EstadoSalud.INCONSCIENTE)
		i: Inigo(ubicacionActual == ac)
		pr: Principe(motivacion == Motivacion.DESCONOCIDA)
		cd: Conde()
	then
		modify(i){
			setUbicacionActual(null)
		}
		
		modify(i){
			setTrabajaDe(e);
		}
		modify(pr){
			setUbicacionActual(ac)
		}
		modify(cd){
			setUbicacionActual(ac)
		}
		modify(pr){
			setMotivacion(Motivacion.SALVAR_BUTTERCUP);
		}
		System.out.println("Principe llega a los acantilados para salvar a Buttercup");
end 

//Fezzik será actualizado en el siguiente acto
rule "Muere Vizzini"
	when 
		cm : CaminoMontana()
		p: Pirata(ubicacionActual == cm)
		i: Inigo(ubicacionActual == null)
		v: Vizzini(ubicacionActual == cm)
	then 
		modify(v){
			setEstadoSalud(EstadoSalud.MUERTO);
		}
		System.out.println("Vizzini esta " + v.getEstadoSalud() + " por " + p.getNombre());
end

/*** ACTO 2 ****/

/*** ACTO 3 ****/

/*** ACTO 4 ****/

/*** ACTO 5 || ACTO FINAL ****/