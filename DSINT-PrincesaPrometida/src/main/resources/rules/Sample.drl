package com.sample
 
import com.sample.DroolsTest.Message;
import animales.*;
import lugares.*;
import personajes.*;
import relaciones.*;
import utilidades.*;
import java.util.*;
import profesiones.*;



//Creación de la base
rule "Creación Profesiones"
	then 
		insert(new BrigadaBrutal());
		insert(new Curandero());
		insert(new Desempleado());
		insert(new Espadachin());
		insert(new Gobernante());
		insert(new Granjero());
		insert(new Guardia());
		insert(new Herrero());
		insert(new Indefinido());
		insert(new Mercenario());
		insert(new Pirateria());
		insert(new Sacerdote());
		insert(new Sirviente());
		insert(new Visir());
		System.out.println("Creo las profesiones");
end 

rule "Creación Lugares"
	then
		insert(new AcantiladosLocura());
		insert(new Bosque());
		insert(new BosqueLadrones());
		insert(new CaminoMontana());
		insert(new CasaMilagrosoMax());
		insert(new Castillo());
		insert(new Espana());
		insert(new Granja());
		insert(new HabitacionN());
		insert(new Mar());
		insert(new PantanoFuego());
		insert(new PozoDesesperacion());	
		System.out.println("Creo los lugares");	
end 

rule "Creación Animales"
	when 
		mar: Mar()
		granja: Granja()
		c: Castillo()
		bl: BosqueLadrones()
		pantano: PantanoFuego()
		cM: CasaMilagrosoMax()
	then
		insert(new AnguilaChillona(mar));
		insert(new Caballo(granja));
		insert(new Cabra(cM));
		insert(new Cerdo(granja));
		insert(new Gallina(bl));
		insert(new Perro(c));
		insert(new RoedorAspectoGigantesco(pantano));
		insert(new Vaca(granja));
		//System.out.println("Se han añadido los animales");
end

rule "Creación Personajes Acto 0"
	agenda-group "Acto0"
	when 
		granja: Granja()
		granjero: Granjero()
		hab: HabitacionN()
		pir: Pirateria()
		mar: Mar()
	then
		insert(new Westley(granja, granjero));
		insert(new Buttercup(granja, granjero));
		insert(new Abuelo(hab));
		insert(new Madre(hab));
		insert(new Nieto(hab));
		insert (new Pirata(mar, pir));
		
		System.out.println("Acto0: Se crean los personajes");
end

//Inicio Acto0
rule "Nieto es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(ab);
    Relacion fm2 = new FamiliarDe(md);
    ArrayList<Relacion> listant = nt.getRelacionesPersonaje();
    listant.add(fm1);
    listant.add(fm2);
    modify(nt){
      setRelacionesPersonaje(listant);
    }
   System.out.println("El nieto es familiar del abuelo y la madre" );
   Archivo.getUnicaInstancia().addInf("El nieto es familiar del abuelo y la madre\n");
end

rule "Abuelo es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(nt);
    Relacion fm2 = new FamiliarDe(md);
    ArrayList<Relacion> listaab = ab.getRelacionesPersonaje();
    listaab.add(fm1);
    listaab.add(fm2);

    modify(ab){
      setRelacionesPersonaje(listaab);
    }
    System.out.println("Abuelo familia" );
    Archivo.getUnicaInstancia().addInf("El abuelo es familiar del nieto y de la madre.\n");
end

rule "Madre es"
  when
    nt: Personaje(nombre == "El Nieto")
    ab: Personaje(nombre == "Abuelo")
    md: Personaje(nombre == "La Madre") 
  then
    Relacion fm1 = new FamiliarDe(ab);
    Relacion fm2 = new FamiliarDe(nt);
    ArrayList<Relacion> listamd = md.getRelacionesPersonaje();
    listamd.add(fm1);
    listamd.add(fm2);
    modify(md){
          setRelacionesPersonaje(listamd);
    }
    System.out.println("Madre es familiar del abuelo y nieto" );
    Archivo.getUnicaInstancia().addInf("La madre es familiar del abuelo y del nieto.\n");
end

rule "Nieto está enfermo"
when
    nt: Nieto()
    ab: Abuelo()
    md: Madre()
  then
  	modify(md){
  		setUbicacionActual(null);
  	}
  	System.out.println("Madre se despide y abuelo lee un cuento al nieto" );
  	Archivo.getUnicaInstancia().addInf("La madre se despide y el abuelo lee un cuendo al nieto enfermo.\n");
end

//Modificar esta relación
rule "Relacion Conocer"
    when
        p1 : Personaje(ubicacionActual != null)
        p2 : Personaje(nombre != p1.getNombre(), ubicacionActual == p1.getUbicacionActual() )
    then

        Relacion r = new ConoceA(p2);
        Relacion r2 = new ConocidoDe(p1);
        ArrayList<Relacion> listaR1 = p1.getRelacionesPersonaje();
        listaR1.add(r);
        modify(p1){
        	setRelacionesPersonaje(listaR1);
        }
        
        ArrayList<Relacion> listaR2 = p2.getRelacionesPersonaje();
        listaR2.add(r2);
        modify(p2){
        	setRelacionesPersonaje(listaR2);
        }
        Archivo.getUnicaInstancia().addInf(p1.getNombre() + " conoce a " + p2.getNombre() + ".\n"); 
end

rule "Westley quiere a Buttercup"
  when
  	g : Lugar( nombre == "Granja" )
    wt: Westley( ubicacionActual == g)
    bt: Buttercup( ubicacionActual == g)
  then
    Relacion q1 = new QuiereA(bt);
    ArrayList<Relacion> listaR = wt.getRelacionesPersonaje();
    listaR.add(q1);
    modify(wt){
          setRelacionesPersonaje(listaR);
    }
    modify(wt){
          setMotivacion(Motivacion.ESTAR_CON_BUTTERCUP);
    }
    Archivo.getUnicaInstancia().addInf("Westley se enamora de Buttercup.\n");
end

rule "Buttercup quiere a Westley"
  when
    g : Lugar( nombre == "Granja" )
    wt: Westley( ubicacionActual == g)
    bt: Buttercup( ubicacionActual == g)
  then
    Relacion q1 = new QuiereA(wt);
    ArrayList<Relacion> listaR = bt.getRelacionesPersonaje();
    listaR.add(q1);
    modify(bt){
          setRelacionesPersonaje(listaR);
    }
    modify(wt){
          setMotivacion(Motivacion.ESTAR_CON_WESTLEY);
    }
   Archivo.getUnicaInstancia().addInf("Buttercup se enamora de Wetsley.\n");
end

rule "Westley se va a hacer fortuna"
    when
    	l: Lugar(nombre == "Mar")
   		lg: Lugar(nombre == "Granja");
        p1: Westley( ubicacionActual == lg, motivacion == Motivacion.ESTAR_CON_BUTTERCUP)
   		
    then
    	modify(p1){
    		setMotivacion(Motivacion.GANAR_DINERO);
    	}
    	modify(p1){
    		setUbicacionActual(l);
    	}
     System.out.println(p1.getNombre() + " se va a " + l.getNombre() + " para " + p1.getMotivacion());
     Archivo.getUnicaInstancia().addInf("Como " + p1.getNombre()+ "quería estar con Buttercup, se va al " + 
     l.getNombre() + " para " + p1.getMotivacion().getString() +".\n");
end

rule "Westley muere"
    when
    	lm: Lugar(nombre == "Mar")
        p: Westley(ubicacionActual == lm)
   		p2: Pirata(ubicacionActual == lm)
    then
    	modify(p){
    		setEstadoSalud(EstadoSalud.MUERTO);
    	}
     System.out.println(p.getNombre() + " esta " + p.getEstadoSalud().getString() +" asesinado por " + p2.getNombre());
     Archivo.getUnicaInstancia().addInf(p.getNombre() + " esta " + p.getEstadoSalud().getString() +" asesinado por " + p2.getNombre()+".\n");
end

rule "Buttercup odia al pirata"
    when
    	g :Lugar(nombre == "Granja")
    	exists (Westley(estadoSalud == EstadoSalud.MUERTO))
    	bt: Buttercup( ubicacionActual == g, motivacion == Motivacion.ESTAR_CON_WESTLEY)
    	pr: Pirata( )
    then
    	Relacion od1 = new OdiaA(pr);
    	Relacion od2 = new OdiadoPor(bt);
    	
    	ArrayList<Relacion> listaR1 = bt.getRelacionesPersonaje();
   		listaR1.add(od1);
	    modify(bt){
	          setRelacionesPersonaje(listaR1);
	    }
	    modify(bt){
	          setMotivacion(Motivacion.DESCONOCIDA);
	    }
	 
    	ArrayList<Relacion> listaR2 = pr.getRelacionesPersonaje();
   		listaR2.add(od2);
	    modify(pr){
	          setRelacionesPersonaje(listaR2);
	    }
	    Archivo.getUnicaInstancia().addInf("Buttercup odia al pirata por la muerte de Westley y pierde su motivación.\n");
end
//Fin acto0

// Inicio Acto1
rule "Creación de Personajes Acto1"
	agenda-group "Acto1"
	when 
		mercenario: Mercenario()
		gobernante: Gobernante()
		visir: Visir()
		castillo: Castillo()
		esp : Espana()
		herrero: Herrero()
		bosque: Bosque()
	then
		insert(new Vizzini(bosque, mercenario ));
		insert(new Inigo(bosque, mercenario));
		insert(new Fezzik(bosque, mercenario));
		insert(new Rey(castillo, gobernante));
		insert(new Principe(castillo, gobernante));
		insert(new Conde(castillo, visir));
		insert(new PadreInigo(esp, herrero));
		System.out.println("Acto1: Se crean los personajes");
end


rule "Rey y Principe son familia"
  when
    pr: Principe( )
    ry: Rey( )
  then
    Relacion fm1 = new FamiliarDe(ry);
    Relacion fm2 = new FamiliarDe(pr);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(fm1);
    modify(pr){
      setRelacionesPersonaje(listaR);
    }
    ArrayList<Relacion> listaR2 = ry.getRelacionesPersonaje();
    listaR2.add(fm2);
    modify(pr){
      setRelacionesPersonaje(listaR2);
    }
end

rule "Principe y Conde amigos"
  when
    pr: Principe( )
    cd: Conde( )
  then
    Relacion am1 = new AmigoDe(cd);
    Relacion am2 = new AmigoDe(pr);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(am1);
    modify(pr){
      setRelacionesPersonaje(listaR);
    }
    ArrayList<Relacion> listaR2 = cd.getRelacionesPersonaje();
    listaR2.add(am2);
    modify(cd){
      setRelacionesPersonaje(listaR2);
    }
    modify(cd){
      setMotivacion(Motivacion.SERVIR_PRINCIPE);
    }
end

rule "El príncipe quiere a Buttercup"
  when
    pr: Principe( )
    bt: Buttercup( )
    
  then
    Relacion q1 = new QuiereA(bt);
    ArrayList<Relacion> listaR = pr.getRelacionesPersonaje();
    listaR.add(q1);
    modify(pr){
          setRelacionesPersonaje(listaR);
    }
    modify(pr){
          setMotivacion(Motivacion.ESTAR_CON_BUTTERCUP);
    }
end

rule "Buttercup prometida del príncipe"
  when
    pr: Principe(motivacion == Motivacion.ESTAR_CON_BUTTERCUP)
    bt: Buttercup( )
    c: Lugar(nombre == "Castillo");
  then
    Relacion p1 = new PrometidaDe(pr);
    Relacion p2 = new PrometidoDe(bt);
    ArrayList<Relacion> listaR1 = bt.getRelacionesPersonaje();
    listaR1.add(p1);
    modify(bt){
          setRelacionesPersonaje(listaR1);
    }
    ArrayList<Relacion> listaR2 = pr.getRelacionesPersonaje();
    listaR2.add(p2);
    modify(pr){
          setRelacionesPersonaje(listaR2);
    }
    //Como es prometida ahora vivirá en el castillo
    modify(bt){
          setUbicacionActual(c);
    }
    System.out.println("El Príncipe y Buttercup se prometen y se anuncia la boda");
end

rule "Buttercup sale a pasear"
	when
		b: Lugar(nombre=="Bosque")
		c: Lugar(nombre =="Castillo")
		bt: Buttercup( ubicacionActual == c)
	then
		modify(bt){
			setUbicacionActual(b);
		}
		System.out.println("Buttercup sale a pasear al bosque");
end			

rule "Secuestro Buttercup"
	when
		b: Bosque();
		princesa: Buttercup(ubicacionActual == b)
		mer: Mercenario()
		v: Vizzini(ubicacionActual == b, profesion == mer)
		i: Inigo(ubicacionActual == b, profesion == mer)
		f: Fezzik(ubicacionActual == b, profesion == mer)
	then
		modify(i){
			setMotivacion(Motivacion.SECUESTRAR_PRINCESA);
		}
		modify(f){
			setMotivacion(Motivacion.SECUESTRAR_PRINCESA);
		}
		modify(v){
			setMotivacion(Motivacion.SECUESTRAR_PRINCESA);
		}
		System.out.println(v.getNombre() + "," + i.getNombre() + " y " + f.getNombre() + " secuestran a "+ princesa.getNombre());
end

rule "Huida por el mar"
	when
		b: Bosque();
		princesa: Buttercup(ubicacionActual == b)
		mer: Mercenario()
		v: Vizzini(ubicacionActual == b, profesion == mer, motivacion == Motivacion.SECUESTRAR_PRINCESA)
		i: Inigo(ubicacionActual == b, profesion == mer)
		f: Fezzik(ubicacionActual == b, profesion == mer)
		mar: Mar()
	then
		modify(v){
			setMotivacion(Motivacion.DECLARAR_GUERRA);
		}
		modify(princesa){
			setUbicacionActual(mar);
		}
		modify(i){
			setUbicacionActual(mar);
		}
		modify(f){
			setUbicacionActual(mar);
		}
		modify(v){
			setUbicacionActual(mar);
		}
		System.out.println("Los mercenarios se llevan a Buttercup por el mar para llegar a la frontera de Guilder.");
end

rule "Anguila ataca a buttercup"
	when 
		m: Mar();
		bt: Buttercup(ubicacionActual == m )
		a: AnguilaChillona(ubicacionActual == m)
	then 
		modify(bt){
			setEstadoSalud(EstadoSalud.EN_PELIGRO);
		}
		System.out.println(bt.getNombre() + " intenta escapar y en el agua es atacada por " + a.getNombre() + 
		", ahora ella está " + bt.getEstadoSalud().getString() +".");
end

rule "Fezzik salva a Buttercup"
	when 
		m: Mar()
		bt: Buttercup( estadoSalud == EstadoSalud.EN_PELIGRO, ubicacionActual == m )
		fz: Fezzik( ubicacionActual == m )
		a: AnguilaChillona( ubicacionActual== m)
	then
		modify(bt){
			setEstadoSalud(EstadoSalud.VIVO);
		}
		modify(a){
			setEstadoSalud(EstadoSalud.MUERTO);
		}		
		System.out.println(fz.getNombre()+" salva a " + bt.getNombre() + ", la anguila muere.");		
end

rule "Llegada a los acantilados"
	when
		m: Mar( )
		acantilados: AcantiladosLocura(  )
		an: AnguilaChillona(ubicacionActual == m , estadoSalud == EstadoSalud.MUERTO)
		v: Vizzini( ubicacionActual == m)
		bt: Buttercup(ubicacionActual == m)
		f: Fezzik( ubicacionActual == m)
		i: Inigo( ubicacionActual == m)
		p: Pirata( ubicacionActual == m )
	then
		modify(i){
			setUbicacionActual(acantilados)
		}
		modify(f){
			setUbicacionActual(acantilados)
		}
		modify(bt){
			setUbicacionActual(acantilados)
		}
		modify(v){
			setUbicacionActual(acantilados)		
		}
		modify(p){
			setMotivacion(Motivacion.SECUESTRAR_PRINCESA)
		}
		System.out.println(v.getNombre() + "," + f.getNombre() + "," + i.getNombre() + "y" + bt.getNombre() + " llegan a " + acantilados.getNombre());
		System.out.println(p.getNombre() + " quiere " + p.getMotivacion().getString());
end

rule "Pirata llega a los acantilados"
	when
		m:Mar()
		cm: CaminoMontana()
		ac: AcantiladosLocura()
		p: Pirata( ubicacionActual == m )
		i: Inigo( ubicacionActual == ac )
		v: Vizzini(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
		bt: Buttercup(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
		f: Fezzik(ubicacionActual == ac, estadoSalud == EstadoSalud.VIVO)
	then
		modify(p){
			setUbicacionActual(ac)
		}
		modify(bt){
			setUbicacionActual(cm)
		}
		modify(v){
			setUbicacionActual(cm)
		}
		modify(f){
			setUbicacionActual(cm)
		}
		System.out.println(v.getNombre() + "," + f.getNombre() + " y " + bt.getNombre() + " huyen a " + cm.getNombre());
		System.out.println( p.getNombre() + " llega a " + ac.getNombre());
end

rule "Historia Domingo Montoya"
	when
		ac: AcantiladosLocura()
		p: Pirata( ubicacionActual == ac )
		i: Inigo( ubicacionActual == ac )
		pi: PadreInigo()
	then
		Relacion fm1 = new FamiliarDe(pi);
	    Relacion fm2 = new FamiliarDe(i);
	    ArrayList<Relacion> listaR = i.getRelacionesPersonaje();
	    listaR.add(fm1);
	    
	    modify(i){
	      setRelacionesPersonaje(listaR);
	    }
	    ArrayList<Relacion> listaR2 = pi.getRelacionesPersonaje();
	    listaR2.add(fm2);
	    modify(pi){
	      setRelacionesPersonaje(listaR2);
	    }
	    
		modify(pi){
			setEstadoSalud(EstadoSalud.MUERTO);
		}
		modify(i){
			setMotivacion(Motivacion.VENGAR_PADRE);
		}
		System.out.println("Domingo Montoya está muerto y su hijo busca venganza");
end

rule "Pirata vence a Iñigo"
	when
		ac: AcantiladosLocura()
		cm: CaminoMontana()
		mercenario: Mercenario()
		p: Pirata(ubicacionActual == ac)
		i: Inigo(ubicacionActual == ac, profesion == mercenario, estadoSalud == EstadoSalud.VIVO)
	then
		modify(i){
			setEstadoSalud(EstadoSalud.INCONSCIENTE)
		}
		modify(p){
			setUbicacionActual(cm)
		}
		System.out.println(p.getNombre() + " vence a " + i.getNombre() +" y sigue la persecución");
		
end 
//Introducir Iñigo desaparecido
rule "Pirata vence a Fezzik"
	when
		cm : CaminoMontana()
		ac: AcantiladosLocura()
		des: Desempleado()
		p: Pirata(ubicacionActual == cm)
		f: Fezzik(ubicacionActual == cm, estadoSalud == EstadoSalud.VIVO)
		i: Inigo(estadoSalud == EstadoSalud.INCONSCIENTE, ubicacionActual == ac)
	then
		modify(f){
			setEstadoSalud(EstadoSalud.INCONSCIENTE)
		}
		modify(i){
			setUbicacionActual(null)
		}
		modify(i){
			setProfesion(des);
		}
		System.out.println(p.getNombre() + " vence a " + f.getNombre());
end

rule "Principe llega a los acantilados"
	when
		ac: AcantiladosLocura()
		cm: CaminoMontana()
		des: Desempleado()
		p: Pirata(ubicacionActual == cm)
		f: Fezzik(ubicacionActual == cm, estadoSalud == EstadoSalud.INCONSCIENTE)
		pr: Principe(motivacion == Motivacion.ESTAR_CON_BUTTERCUP)
		cd: Conde()
	then
		modify(pr){
			setUbicacionActual(ac)
		}
		modify(cd){
			setUbicacionActual(ac)
		}
		modify(pr){
			setMotivacion(Motivacion.SALVAR_BUTTERCUP);
		}
		modify(f){
			setUbicacionActual(null)
		}
		modify(f){
			setProfesion(des);
		}
		System.out.println("Príncipe llega a los acantilados para salvar a Buttercup");
end 

rule "Muere Vizzini"
	when 
		cm : CaminoMontana()
		p: Pirata(ubicacionActual == cm)
		v: Vizzini(ubicacionActual == cm)
	then 
		modify(v){
			setEstadoSalud(EstadoSalud.MUERTO);
		}
		System.out.println("Vizzini está " + v.getEstadoSalud().getString() + " por " + p.getNombre());
end
//Las ubicaciones y empleos de Fezzik e Íñigo ya han sido modificadas en las reglas anteriores, 
//ya no hay que modificarlo en el acto2

/*** ACTO 2 El	príncipe	sigue	las	huellas	hasta	que	se	produce	el beso	de	amor	verdadero****/

rule "Pirata y Buttercup huyen"
	when 
		camino : CaminoMontana()
		v: Vizzini(estadoSalud == EstadoSalud.MUERTO)
		b: Buttercup(ubicacionActual == camino)
		p: Pirata(ubicacionActual == camino)
		colina: Colina()
	then 
		modify(b){
			setUbicacionActual(colina)
		}
		modify(p){
			setUbicacionActual(colina)
		}
		Archivo.getUnicaInstancia().escribir("El pirata y Buttercup huyen hacia la colina");
end

rule "Principe rastrea a Buttercup"
	when 
		ac: AcantiladosLocura()
		pirata: Pirata(ubicacionActual != ac) //soolo llega cuando ya no esten alli.
		p: Principe(ubicacionActual == ac)
		cm: CaminoMontana()
	then 
		modify(p){
			setUbicacionActual(cm)
		}
		Archivo.getUnicaInstancia().escribir(p.getNombre() + " rastrea a su prometida hasta "+ cm.getNombre());
end 

rule "Buttercup descubre quien es su secuestrador"
	when 
		colina: Colina()
		but: Buttercup(ubicacionActual == colina)
		pir: Pirata(ubicacionActual == colina)
	then 
		Archivo.getUnicaInstancia().escribir(but.getNombre() +" descubre que ha sido secuestrada por " + pir.getNombre());
	
end

rule "Principe alcanza a la princesa"
//solo llegara cuando el pirata y la princesa esten alli.
	when 
		co: Colina()
		cm: CaminoMontana()
		but: Buttercup(ubicacionActual == co)
		pir: Pirata(ubicacionActual == co)
		prin: Principe(ubicacionActual == cm)
	then 
		modify(prin){
			setUbicacionActual(co)
		}
		Archivo.getUnicaInstancia().escribir(prin.getNombre() + " se encuentra en " + co.getNombre());
end

rule "Como Desees en la colina"
	when 
		co: Colina()
		we: Westley(estadoSalud == EstadoSalud.MUERTO)
		bu: Buttercup(ubicacionActual == co)
		pr: Principe (ubicacionActual == co)
		pi: Pirata(ubicacionActual == co)
		pa: PantanoFuego()
	then 
		Archivo.getUnicaInstancia().escribir(bu.getNombre() + " empuja a " + pi.getNombre()+ " y grita: COMO DESEES.\n");
		modify(we){
			setEstadoSalud(EstadoSalud.VIVO),
			setUbicacionActual(pa);
		}
		Archivo.getUnicaInstancia().escribir(bu.getNombre() + " se tira por " + co.getNombre()+"\n");
		modify(bu){
			setUbicacionActual(pa);
		}
		Archivo.getUnicaInstancia().escribir(bu.getNombre() +" y " + we.getNombre() + " estan en " +pa.getNombre() + "\n");
//no se que hacer con el principe ni el pirata xD
		
end

rule "ubicacionPirata"
	when
		w: Westley(estadoSalud == EstadoSalud.VIVO)
		p: Pirata(ubicacionActual != w.getUbicacionActual)
	then 
		modify(p){
			setUbicacionActual(w.getUbicacionActual());
		}
end 




/*** ACTO 3  Buttercup	y	Westley	llegan	al	pantano	hasta que	muere	el	rey****/

/*** ACTO 4 	Presentación	de	la	Nueva	Reina	hasta la	muerte de	Westley ****/

/*** ACTO 5 || ACTO FINAL  Llegan	a	casa	del	Milagroso	Max	hasta	el	final. ****/
rule "Creación de Personajes Acto5"
	agenda-group "Acto5"
	when
		cur: Curandero()
		sac: Sacerdote()
		visir: Visir()
		ig: IglesiaCastillo()
		cs: CasaMilagrosoMax()
	then
		insert(new Max(cs, cur ));
		insert(new Valerie(cs, cur));
		insert(new Obispo(ig, sac));
		System.out.println("Acto5: Se crean los personajes");
end

rule "Comprar un milagro"
	when
		pd: PozoDesesperacion()
		cs: CasaMilagrosoMax()
		bb: BrigadaBrutal()
		i: Inigo(ubicacionActual == pd)
		w: Westley(ubicacionActual == pd, estadoSalud == EstadoSalud.MUERTO)
		f: Fezzik(ubicacionActual == pd, profesion == bb)
		m: Max(ubicacionActual == cs)
	then
		modify(i){
			setUbicacionActual(cs);
		}
		modify(f){
			setUbicacionActual(cs);
		}
		modify(w){
			setUbicacionActual(cs);
		}
	    modify(m){
	          setMotivacion(Motivacion.GANAR_DINERO);
	    }
		System.out.println("Llegada a la casa del milagrero");
end

rule "Está Medio Muerto"
	when
		cs: CasaMilagrosoMax()
		i: Inigo(ubicacionActual == cs)
		w: Westley(ubicacionActual == cs, estadoSalud == EstadoSalud.MUERTO)
		f: Fezzik(ubicacionActual == cs)
		m: Max(ubicacionActual == cs, motivacion == Motivacion.GANAR_DINERO)
		v: Valerie(ubicacionActual == cs)
	then
		modify(w){
			setEstadoSalud(EstadoSalud.MEDIO_MUERTO);
		}
		modify(w){
	          setMotivacion(Motivacion.AMOR_VERDADERO);
	    }
		System.out.println("Se descubre que está medio muerto");
end

rule "Discusión de matrimorio"
	when
		cs: CasaMilagrosoMax()
		i: Inigo(ubicacionActual == cs)
		w: Westley(ubicacionActual == cs, estadoSalud == EstadoSalud.MEDIO_MUERTO)
		f: Fezzik(ubicacionActual == cs)
		m: Max(ubicacionActual == cs, motivacion == Motivacion.GANAR_DINERO)
		v: Valerie(ubicacionActual == cs)
	then
		modify(m){
	          setEstadoCivil(EstadoCivil.CASADO);
	    }
	    modify(v){
	          setEstadoCivil(EstadoCivil.CASADO);
	    }
	    Relacion fm1 = new FamiliarDe(v);
	    Relacion fm2 = new FamiliarDe(m);
	    ArrayList<Relacion> listM = m.getRelacionesPersonaje();
	    listM.add(fm1);
	    modify(m){
	      setRelacionesPersonaje(listM);
	    }
	     ArrayList<Relacion> listV = v.getRelacionesPersonaje();
	    listV.add(fm2);
	    modify(v){
	      setRelacionesPersonaje(listV);
	    }
		System.out.println("Max y Valerie tienen una discusión");
end

rule "Causa noble"
	when
		cs: CasaMilagrosoMax()
		i: Inigo(ubicacionActual == cs)
		w: Westley(ubicacionActual == cs, estadoSalud == EstadoSalud.MEDIO_MUERTO)
		f: Fezzik(ubicacionActual == cs)
		m: Max(ubicacionActual == cs, motivacion == Motivacion.GANAR_DINERO)
		v: Valerie(ubicacionActual == cs)
		princ: Principe()
	then
		System.out.println("Si Westley revive el príncipe sufrirá humillaciones a mansalba");
		Relacion od1 = new OdiaA(princ);
    	Relacion od2 = new OdiadoPor(m);
    	
    	ArrayList<Relacion> listaR1 = m.getRelacionesPersonaje();
   		listaR1.add(od1);
	    modify(m){
	          setRelacionesPersonaje(listaR1);
	    }
    	ArrayList<Relacion> listaR2 = princ.getRelacionesPersonaje();
   		listaR2.add(od2);
	    modify(princ){
	          setRelacionesPersonaje(listaR2);
	    }
	    modify(m){
	          setMotivacion(Motivacion.HUMILLAR_PRINCIPE);
	    }
	    System.out.println("Max hace la píldora");
end

rule "Plan de asalto"
	when
		cs: CasaMilagrosoMax()
		mc: MurallaCastillo()
		i: Inigo(ubicacionActual == cs)
		w: Westley(ubicacionActual == cs, estadoSalud == EstadoSalud.MEDIO_MUERTO)
		f: Fezzik(ubicacionActual == cs)
	then
		modify(i){
			setUbicacionActual(mc);
		}
		modify(f){
			setUbicacionActual(mc);
		}
		modify(w){
			setUbicacionActual(mc);
		}
		modify(w){
			setEstadoSalud(EstadoSalud.DEBIL);
		}
	    System.out.println("La píldora surge efecto y trazan el plan para entrar al castillo");
end

rule "La Boda oficial primera parte"
	when
		ig: IglesiaCastillo()
		cast: Castillo()
		r: Rey(ubicacionActual == cast)
		b: Buttercup(ubicacionActual == cast)
		pr: Principe(ubicacionActual == cast)
		cd: Conde(ubicacionActual == cast)
		ob: Obispo(ubicacionActual == ig)
	then
		modify(r){
			setUbicacionActual(ig);
		}
		modify(b){
			setUbicacionActual(ig);
		}
		modify(pr){
			setUbicacionActual(ig);
		}
		modify(cd){
			setUbicacionActual(ig);
		}
	    System.out.println("Inicio de la boda");
end

rule "Inicio del plan"
	when
		pc: PuertaCastillo()
		mc: MurallaCastillo()
		y: Yalin(ubicacionActual == pc)
		i: Inigo(ubicacionActual == mc)
		w: Westley(ubicacionActual == mc)
		f: Fezzik(ubicacionActual == mc)
	then
		modify(i){
			setUbicacionActual(pc);
		}
		modify(f){
			setUbicacionActual(pc);
		}
		modify(w){
			setUbicacionActual(pc);
		}
	    System.out.println("Inicio del plan para entrar al castillo");
end

rule "La Boda oficial segunda parte"
	when
		ig: IglesiaCastillo()
		pc : PasilloCastillo()
		r: Rey(ubicacionActual == ig)
		b: Buttercup(ubicacionActual == ig)
		pr: Principe(ubicacionActual == ig)
		cd: Conde(ubicacionActual == ig)
		ob: Obispo(ubicacionActual == ig)
	then
		modify(cd){
			setUbicacionActual(pc);
		}
	    System.out.println("el conde abandona la boda con algunos guardias");
end

rule "Entrada al Castillo"
	when
		pc: PuertaCastillo()
		pas : PasilloCastillo()
		y: Yalin(ubicacionActual == pc)
		i: Inigo(ubicacionActual == pc)
		w: Westley(ubicacionActual == pc)
		f: Fezzik(ubicacionActual == pc)
	then
	    System.out.println("Los guardias se asustan y Yalin les da la llave para entrar");
	    modify(i){
			setUbicacionActual(pas);
		}
		modify(f){
			setUbicacionActual(pas);
		}
		modify(w){
			setUbicacionActual(pas);
		}
end

rule "La Boda oficial fin"
	when
		ig: IglesiaCastillo()
		pc : PasilloCastillo()
		cas : Castillo()
		r: Rey(ubicacionActual == ig)
		b: Buttercup(ubicacionActual == ig)
		pr: Principe(ubicacionActual == ig)
		ob: Obispo(ubicacionActual == ig)
	then
		modify(pr){
			setUbicacionActual(cas);
		}
		modify(r){
			setUbicacionActual(cas);
		}
		modify(b){
			setUbicacionActual(cas);
		}
		modify(b){
			setEstadoCivil(EstadoCivil.CASADO);
		}
		modify(pr){
			setEstadoCivil(EstadoCivil.CASADO);
		}
	    System.out.println("Termina la boda");
end

rule "Encuentro con el Conde"
	when
		pas : PasilloCastillo()
		sc : SalonCastillo()
		c: Conde(ubicacionActual == pas)
		i: Inigo(ubicacionActual == pas)
		w: Westley(ubicacionActual == pas)
		f: Fezzik(ubicacionActual == pas)
	then
	    System.out.println("Iñigo mata a los guardias y el conde sale huyendo");
	    modify(i){
			setUbicacionActual(sc);
		} 
		modify(c){
			setUbicacionActual(sc);
		} 
	    modify(w){
			setUbicacionActual(null);
		}   
end

rule "Charla con el Rey"
	when
		cas : Castillo()
		ap: AposentosPrincesa()
		r: Rey(ubicacionActual == cas)
		b: Buttercup(ubicacionActual == cas, estadoCivil == EstadoCivil.CASADO)
	then
		System.out.println("Buttercup tiene aprecio por el Rey");
		Relacion am1 = new AmigoDe(r);
    	Relacion am2 = new AmigoDe(b);
    	
    	ArrayList<Relacion> listaR1 = b.getRelacionesPersonaje();
   		listaR1.add(am1);
	    modify(b){
	          setRelacionesPersonaje(listaR1);
	    }
    	ArrayList<Relacion> listaR2 = r.getRelacionesPersonaje();
   		listaR2.add(am2);
	    modify(r){
	          setRelacionesPersonaje(listaR2);
	    }
	    
	    System.out.println("Buttercup le dice al rey que lo ha hecho por él y que se suicidadrá en sus aposentos");
	    modify(r){
			setUbicacionActual(null);
		}
		modify(b){
			setUbicacionActual(ap);
		}
end

rule "Enfrentamiento con el Conde"
	when
		sc : SalonCastillo()
		c: Conde(ubicacionActual == sc)
		i: Inigo(ubicacionActual == sc)
	then
	    System.out.println("El conde lanza un cuchillo que hiere a Iñigo");
	    modify(i){
			setEstadoSalud(EstadoSalud.HERIDO);
		}   
end

rule "Reencuentro"
	when
		ap : AposentosPrincesa()
		b: Buttercup(ubicacionActual == ap, motivacion == Motivacion.SUICIDARSE)
		w: Westley(ubicacionActual == null, estadoSalud == EstadoSalud.DEBIL)
	then
	    modify(w){
			setUbicacionActual(ap);
		}
		System.out.println("Buttercup intenta suicidarse pero Westley la detiene");
		modify(b){
			setMotivacion(Motivacion.ESTAR_CON_WESTLEY);
		}
		modify(w){
			setMotivacion(Motivacion.ESTAR_CON_BUTTERCUP);
		}
		System.out.println("Buttercup se lanza a darle amor a Westley, pero este está débil");
end

rule "Prepárate a morir"
	when
		sc : SalonCastillo()
		c: Conde(ubicacionActual == sc)
		i: Inigo(ubicacionActual == sc, estadoSalud == EstadoSalud.HERIDO)
	then
	    System.out.println("Hola, me llamo Íñigo Montoya. Tú mataste a mi padre. Prepárate a morir");
		modify(c){
			setEstadoSalud(EstadoSalud.MUERTO);
		}
end

rule "Vacío legal"
	when
		ap : AposentosPrincesa()
		b: Buttercup(ubicacionActual == ap, motivacion == Motivacion.ESTAR_CON_WESTLEY)
		w: Westley(ubicacionActual == ap, estadoSalud == EstadoSalud.DEBIL, motivacion == Motivacion.ESTAR_CON_BUTTERCUP)
		p: Principe(ubicacionActual == null)
	then
		System.out.println("Buttercup y Westley llegan a la conclusión que al no decir \"Si quiero\" ella no se ha casado");
		modify(b){
			setEstadoCivil(EstadoCivil.SOLTERO);
		}
		modify(p){
			setEstadoCivil(EstadoCivil.SOLTERO);
		}
		System.out.println("El príncipe aparece");
	    modify(p){
			setUbicacionActual(ap);
		}
end

rule "A sufrimiento"
	when
		ap : AposentosPrincesa()
		b: Buttercup(ubicacionActual == ap, estadoCivil == EstadoCivil.SOLTERO)
		w: Westley(ubicacionActual == ap)
		p: Principe(ubicacionActual == ap, estadoCivil == EstadoCivil.SOLTERO)
	then
		System.out.println("Westley y el prícipe se van a enfrentar en un duelo \"a sufrimiento\" ");
		
		System.out.println("Westley le explica al príncipe cómo lo va a mutiliar");
		modify(w){
			setEstadoSalud(EstadoSalud.RECUPERADO);
		}
end

//Consultas
rule "Consulta Quien" 
	when 
		con: ConsultaQuien()
		p: Personaje (nombre == con.getNombre)
	then
		System.out.println("ENTRO REGLA CONSULTA QUIEN");
		System.out.println(p.toString());
		Archivo.getUnicaInstancia().escribir(p.toString() + "\n");
end

rule "Consulta Quien No Existe"
	when 
		con: ConsultaQuien()
		not Personaje (nombre == con.getNombre)
	then
		System.out.println("No sé quien es " + con.getNombre() + " en el acto " + con.getActo());
		Archivo.getUnicaInstancia().escribir("No sé quien es " + con.getNombre() + " en el acto " + con.getActo()+ "\n");
end

rule "Consulta Que"
	when
		con: ConsultaQue()
	then
		System.out.println("CONSULTA QUE");
		System.out.print("En el acto " + con.getActo().getNumActo() + "." + " ");
		Archivo.getUnicaInstancia().escribir("En el acto " + con.getActo().getNumActo() + "." + " ");
		Archivo.getUnicaInstancia().escribirInf();
		Archivo.getUnicaInstancia().escribir("Fin pregunta que\n");
		//System.out.println(Archivo.getUnicaInstancia().getpath());
end

rule "Consulta si Sexo"
 when 
  consulta : ConsultaSi()
  eval (Sexo.isValor(consulta.getValorAtributo()))
  p: Personaje(nombre == consulta.getNombre())
 then
  modify(p){
   setSexo(Sexo.get(consulta.getValorAtributo()));
  }
 
 insert (consulta.getConsulta()); 
 
  System.out.println("SE PUEDE HACER ");
  System.out.println( p.getNombre() +" es "+ p.getSexo());
end



